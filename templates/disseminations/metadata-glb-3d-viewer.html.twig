{{ attach_library('arche_core_gui/dissemination-glb-3d') }}
<div class="loading-indicator text-center" id="glb-loader">
    <img src="/browser/themes/contrib/arche-theme-bs/images/arche_logo_flip_47px.gif" alt="Loading...">
    <br>
    <p id="glb-loader-text"></p>
</div>
<script>
    self.ModelViewerElement = self.ModelViewerElement || {};
    self.ModelViewerElement.meshoptDecoderLocation = 'https://cdn.jsdelivr.net/npm/meshoptimizer/meshopt_decoder.js';
</script>
<script type="module" src="https://ajax.googleapis.com/ajax/libs/model-viewer/4.0.0/model-viewer.min.js"></script>

<div class="container viewer-3d-basic" >
    <div class="row justify-content-center text-center">
        <div class="col-lg-12">
            <h5>3D Viewer</h5>
            <model-viewer alt="" 
                          id="modelViewer"
                          src="https://arche-glb.acdh.oeaw.ac.at/?id={{ data.getRepoUrl() }}" 
                          shadow-intensity="1" 
                          camera-controls 
                          touch-action="pan-y"
                          camera-orbit="0deg 75deg 3m"
                          class="glb-viewer-class">
            </model-viewer>

            <div class="controls pt-2 d-none" id="glb-controls">
                <button id="glbResetView" class="ms-auto btn btn-arche-blue">{{ "Reset View"|trans }}</button>
                <button id="glbZoomIn" class="ms-auto btn btn-arche-blue">{{ "Zoom In"|trans }}</button>
                <button id="glbZoomOut" class="ms-auto btn btn-arche-blue">{{ "Zoom Out"|trans }}</button>
            </div>

            <script type="module">
                const modelViewer = document.getElementById('modelViewer');
                const loader = document.getElementById('glb-loader');
                const loader_text = document.getElementById('glb-loader-text');
                const glbControls = document.getElementById('glb-controls');

                // When the model has loaded, hide the loader.
                modelViewer.addEventListener('load', () => {
                    loader.style.display = 'none';
                    // Remove a class
                    glbControls.classList.remove('d-none');
                });

                // Optionally, you can update the loader on progress:
                modelViewer.addEventListener('progress', (event) => {
                    if (event.detail.totalProgress) {
                        loader.textContent = `Loading model... ${Math.floor(event.detail.totalProgress * 100)}%`;
                    }
                });


                // --- Zoom helpers using Field Of View (FOV) ---
                function clamp(n, min, max) {
                    return Math.min(max, Math.max(min, n));
                }

// Model-Viewer v4: getFieldOfView() returns a number (degrees, no unit).
// Smaller FOV = zoom in. Larger FOV = zoom out.
                const FOV_MIN = 10;   // v4 docs: default min â‰ˆ 10deg
                const FOV_MAX = 80;   // raise if you want wider
                const FOV_STEP = 5;   // change zoom step to taste

                $(document).delegate("#glbZoomIn", "click", function () {
                    const fov = modelViewer.getFieldOfView();     // number (deg)
                    const next = clamp(fov - FOV_STEP, FOV_MIN, FOV_MAX);
                    modelViewer.setAttribute('field-of-view', `${next}deg`);
                    if (typeof modelViewer.jumpCameraToGoal === 'function')
                        modelViewer.jumpCameraToGoal();
                });

                $(document).delegate("#glbZoomOut", "click", function () {
                    const fov = modelViewer.getFieldOfView();
                    const next = clamp(fov + FOV_STEP, FOV_MIN, FOV_MAX);
                    modelViewer.setAttribute('field-of-view', `${next}deg`);
                    if (typeof modelViewer.jumpCameraToGoal === 'function')
                        modelViewer.jumpCameraToGoal();
                });

                $(document).delegate("#glbResetView", "click", function () {
                    // Reset both orbit and FOV for a true reset
                    if (typeof modelViewer.resetCameraOrbit === 'function')
                        modelViewer.resetCameraOrbit();
                    const defaultOrbit = modelViewer.getAttribute('camera-orbit') || '0deg 75deg 3m';
                    modelViewer.setAttribute('camera-orbit', defaultOrbit);
                    modelViewer.setAttribute('field-of-view', 'auto'); // or a fixed value like '30deg'
                    if (typeof modelViewer.jumpCameraToGoal === 'function')
                        modelViewer.jumpCameraToGoal();
                });


            </script>    


        </div>
    </div>
</div>
